type: mapping
id: aws_client_vpn_logs_4001_network_activity_1.1.0
version: '11'
name: Aws Client Vpn Logs to OCSF class Network Activity
data-types:
- aws-client-vpn-logs
mapping:
  fields:
    action: (CASE ((0)::NUMBER) WHEN 0 THEN 'Unknown' WHEN 1 THEN 'Allowed' WHEN 2
      THEN 'Denied' WHEN 99 THEN 'Other' END)::VARCHAR
    action_id: (0)::NUMBER
    activity_id: (CASE WHEN CONNECTION_LOG_TYPE IS NULL THEN 0 WHEN CONNECTION_LOG_TYPE
      = 'connection-attempt' AND CONNECTION_ATTEMPT_STATUS = 'successful' THEN 1 WHEN
      CONNECTION_LOG_TYPE = 'connection-reset' THEN 3 WHEN CONNECTION_LOG_TYPE = 'connection-attempt'
      AND CONNECTION_ATTEMPT_STATUS = 'failed' THEN 4 ELSE 99 END)::NUMBER
    activity_name: (CASE ((CASE WHEN CONNECTION_LOG_TYPE IS NULL THEN 0 WHEN CONNECTION_LOG_TYPE
      = 'connection-attempt' AND CONNECTION_ATTEMPT_STATUS = 'successful' THEN 1 WHEN
      CONNECTION_LOG_TYPE = 'connection-reset' THEN 3 WHEN CONNECTION_LOG_TYPE = 'connection-attempt'
      AND CONNECTION_ATTEMPT_STATUS = 'failed' THEN 4 ELSE 99 END)::NUMBER) WHEN 0
      THEN 'Unknown' WHEN 1 THEN 'Open' WHEN 2 THEN 'Close' WHEN 3 THEN 'Reset' WHEN
      4 THEN 'Fail' WHEN 5 THEN 'Refuse' WHEN 6 THEN 'Traffic' WHEN 99 THEN 'Other'
      END)::VARCHAR
    actor.session.is_vpn: (IFF(CONNECTION_ID IS NOT NULL, TRUE, FALSE))::BOOLEAN
    actor.user.name: (USERNAME)::VARCHAR
    api: NULL::VARIANT
    app_name: NULL::VARCHAR
    attacks: NULL::ARRAY
    authorizations: NULL::ARRAY
    category_name: (CASE ((4)::NUMBER) WHEN 4 THEN 'Network Activity' END)::VARCHAR
    category_uid: (4)::NUMBER
    class_name: ('network_activity')::VARCHAR
    class_uid: ('4001')::NUMBER
    cloud: NULL::VARIANT
    connection_info.protocol_name: (IFF(TRANSPORT_PROTOCOL IN ('tcp', 'udp'), TRANSPORT_PROTOCOL,
      NULL))::VARCHAR
    connection_info.protocol_num: (CASE WHEN TRANSPORT_PROTOCOL = 'tcp' THEN 6 WHEN
      TRANSPORT_PROTOCOL = 'udp' THEN 17 ELSE NULL END)::NUMBER
    connection_info.uid: (CONNECTION_ID)::VARCHAR
    count: NULL::NUMBER
    device.ip: (DEVICE_IP)::VARCHAR
    device.os.type: (CASE ((CASE WHEN DEVICE_TYPE IS NULL THEN 0 WHEN DEVICE_TYPE
      = 'windows' THEN 100 WHEN DEVICE_TYPE = 'linux' THEN 200 WHEN DEVICE_TYPE =
      'android' THEN 201 WHEN DEVICE_TYPE = 'mac' THEN 300 END)::NUMBER) WHEN 0 THEN
      'Unknown' WHEN 100 THEN 'Windows' WHEN 101 THEN 'Windows Mobile' WHEN 200 THEN
      'Linux' WHEN 201 THEN 'Android' WHEN 300 THEN 'macOS' WHEN 301 THEN 'iOS' WHEN
      302 THEN 'iPadOS' WHEN 400 THEN 'Solaris' WHEN 401 THEN 'AIX' WHEN 402 THEN
      'HP-UX' WHEN 99 THEN 'Other' END)::VARCHAR
    device.os.type_id: (CASE WHEN DEVICE_TYPE IS NULL THEN 0 WHEN DEVICE_TYPE = 'windows'
      THEN 100 WHEN DEVICE_TYPE = 'linux' THEN 200 WHEN DEVICE_TYPE = 'android' THEN
      201 WHEN DEVICE_TYPE = 'mac' THEN 300 END)::NUMBER
    device.uid: (CLIENT_VPN_ENDPOINT_ID)::VARCHAR
    disposition: (CASE ((0)::NUMBER) WHEN 0 THEN 'Unknown' WHEN 1 THEN 'Allowed' WHEN
      10 THEN 'Exonerated' WHEN 11 THEN 'Corrected' WHEN 12 THEN 'Partially Corrected'
      WHEN 13 THEN 'Uncorrected' WHEN 14 THEN 'Delayed' WHEN 15 THEN 'Detected' WHEN
      16 THEN 'No Action' WHEN 17 THEN 'Logged' WHEN 18 THEN 'Tagged' WHEN 19 THEN
      'Alert' WHEN 2 THEN 'Blocked' WHEN 20 THEN 'Count' WHEN 21 THEN 'Reset' WHEN
      22 THEN 'Captcha' WHEN 23 THEN 'Challenge' WHEN 24 THEN 'Access Revoked' WHEN
      25 THEN 'Rejected' WHEN 26 THEN 'Unauthorized' WHEN 27 THEN 'Error' WHEN 3 THEN
      'Quarantined' WHEN 4 THEN 'Isolated' WHEN 5 THEN 'Deleted' WHEN 6 THEN 'Dropped'
      WHEN 7 THEN 'Custom Action' WHEN 8 THEN 'Approved' WHEN 9 THEN 'Restored' WHEN
      99 THEN 'Other' END)::VARCHAR
    disposition_id: (0)::NUMBER
    dst_endpoint: NULL::VARIANT
    duration: NULL::NUMBER
    end_time: (date_part('epoch_milliseconds', (CONNECTION_END_TIME)::TIMESTAMP_LTZ))::NUMBER
    end_time_dt: (CONNECTION_END_TIME)::TIMESTAMP_LTZ
    enrichments: NULL::ARRAY
    firewall_rule: NULL::VARIANT
    load_balancer: NULL::VARIANT
    malware: NULL::ARRAY
    message: NULL::VARCHAR
    metadata.extensions: ARRAY_CONSTRUCT(OBJECT_CONSTRUCT_KEEP_NULL('name', 'windows',
      'version', '2', 'uid', '1.1.0'))
    metadata.loggers: ARRAY_CONSTRUCT(OBJECT_CONSTRUCT_KEEP_NULL('version', metadata$dataflow_id))
    metadata.processed_time: (date_part('epoch_milliseconds', metadata$insertion_time::TIMESTAMP_LTZ))::NUMBER
    metadata.processed_time_dt: (metadata$insertion_time)::TIMESTAMP_LTZ
    metadata.product.name: ('aws-client-vpn-logs')::VARCHAR
    metadata.product.vendor_name: ('aws')::VARCHAR
    metadata.profiles: (ARRAY_CONSTRUCT('cloud','datetime','host','network_proxy','security_control','load_balancer','container','linux/linux_users'))::ARRAY
    metadata.uid: (metadata$uuid)::VARCHAR
    metadata.version: ('1.1.0')::VARCHAR
    observables:
    - name: '''actor.user'''
      type: '''User'''
      type_id: 21
      reputation: null::VARIANT
      value: null::VARCHAR
    - name: '''actor.user.name'''
      type: '''User Name'''
      type_id: 4
      reputation: null::VARIANT
      value: (USERNAME)::VARCHAR
    - name: '''device'''
      type: '''Endpoint'''
      type_id: 20
      reputation: null::VARIANT
      value: null::VARCHAR
    - name: '''device.ip'''
      type: '''IP Address'''
      type_id: 2
      reputation: null::VARIANT
      value: (DEVICE_IP)::VARCHAR
    - name: '''src_endpoint.ip'''
      type: '''IP Address'''
      type_id: 2
      reputation: null::VARIANT
      value: (CLIENT_IP)::VARCHAR
    proxy: NULL::VARIANT
    proxy_connection_info: NULL::VARIANT
    proxy_endpoint: NULL::VARIANT
    proxy_http_request: NULL::VARIANT
    proxy_http_response: NULL::VARIANT
    proxy_tls: NULL::VARIANT
    proxy_traffic: NULL::VARIANT
    raw_data: NULL::VARCHAR
    severity: (CASE ((0)::NUMBER) WHEN 0 THEN 'Unknown' WHEN 1 THEN 'Informational'
      WHEN 2 THEN 'Low' WHEN 3 THEN 'Medium' WHEN 4 THEN 'High' WHEN 5 THEN 'Critical'
      WHEN 6 THEN 'Fatal' WHEN 99 THEN 'Other' END)::VARCHAR
    severity_id: (0)::NUMBER
    src_endpoint.ip: (CLIENT_IP)::VARCHAR
    src_endpoint.port: (PORT)::NUMBER
    start_time: (date_part('epoch_milliseconds', (CONNECTION_START_TIME)::TIMESTAMP_LTZ))::NUMBER
    start_time_dt: (CONNECTION_START_TIME)::TIMESTAMP_LTZ
    status: (CASE ((CASE WHEN CONNECTION_ATTEMPT_STATUS IS NULL THEN 0 WHEN CONNECTION_ATTEMPT_STATUS
      = 'successful' THEN 1 WHEN CONNECTION_ATTEMPT_STATUS = 'failed' THEN 2 ELSE
      99 END)::NUMBER) WHEN 0 THEN 'Unknown' WHEN 1 THEN 'Success' WHEN 2 THEN 'Failure'
      WHEN 99 THEN 'Other' END)::VARCHAR
    status_code: NULL::VARCHAR
    status_detail: (CONNECTION_ATTEMPT_FAILURE_REASON)::VARCHAR
    status_id: (CASE WHEN CONNECTION_ATTEMPT_STATUS IS NULL THEN 0 WHEN CONNECTION_ATTEMPT_STATUS
      = 'successful' THEN 1 WHEN CONNECTION_ATTEMPT_STATUS = 'failed' THEN 2 ELSE
      99 END)::NUMBER
    time: (date_part('epoch_milliseconds', connection_start_time::TIMESTAMP_LTZ))::NUMBER
    time_dt: (connection_start_time)::TIMESTAMP_LTZ
    timezone_offset: NULL::NUMBER
    tls.certificate.uid: (COMMON_NAME)::VARCHAR
    traffic.bytes: (INGRESS_BYTES + EGRESS_BYTES)::NUMBER
    traffic.bytes_in: (INGRESS_BYTES)::NUMBER
    traffic.bytes_out: (EGRESS_BYTES)::NUMBER
    traffic.packets: (INGRESS_PACKETS + EGRESS_PACKETS)::NUMBER
    traffic.packets_in: (INGRESS_PACKETS)::NUMBER
    traffic.packets_out: (EGRESS_PACKETS)::NUMBER
    type_name: '(CASE ((CASE WHEN CONNECTION_LOG_TYPE IS NULL THEN 400100 WHEN CONNECTION_LOG_TYPE
      = ''connection-attempt'' AND CONNECTION_ATTEMPT_STATUS = ''successful'' THEN
      400101 WHEN CONNECTION_LOG_TYPE = ''connection-reset'' THEN 400103 WHEN CONNECTION_LOG_TYPE
      = ''connection-attempt'' AND CONNECTION_ATTEMPT_STATUS = ''failed'' THEN 400104
      ELSE 400199 END)::NUMBER) WHEN 400100 THEN ''Network Activity: Unknown'' WHEN
      400101 THEN ''Network Activity: Open'' WHEN 400102 THEN ''Network Activity:
      Close'' WHEN 400103 THEN ''Network Activity: Reset'' WHEN 400104 THEN ''Network
      Activity: Fail'' WHEN 400105 THEN ''Network Activity: Refuse'' WHEN 400106 THEN
      ''Network Activity: Traffic'' WHEN 400199 THEN ''Network Activity: Other'' END)::VARCHAR'
    type_uid: (CASE WHEN CONNECTION_LOG_TYPE IS NULL THEN 400100 WHEN CONNECTION_LOG_TYPE
      = 'connection-attempt' AND CONNECTION_ATTEMPT_STATUS = 'successful' THEN 400101
      WHEN CONNECTION_LOG_TYPE = 'connection-reset' THEN 400103 WHEN CONNECTION_LOG_TYPE
      = 'connection-attempt' AND CONNECTION_ATTEMPT_STATUS = 'failed' THEN 400104
      ELSE 400199 END)::NUMBER
    unmapped: NULL::VARIANT
    url: NULL::VARIANT
